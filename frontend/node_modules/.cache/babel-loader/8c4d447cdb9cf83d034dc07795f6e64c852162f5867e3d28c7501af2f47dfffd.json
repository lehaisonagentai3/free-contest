{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = '/api/v1';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Officers API\nexport const getOfficers = async () => {\n  const response = await api.get('/officers');\n  return response.data.data;\n};\nexport const getOfficerById = async id => {\n  const response = await api.get(`/officers/${id}`);\n  return response.data.data;\n};\n\n// Subjects API\nexport const getSubjects = async () => {\n  const response = await api.get('/subjects');\n  return response.data.data;\n};\n\n// Units API\nexport const getUnits = async () => {\n  const response = await api.get('/units');\n  return response.data.data;\n};\n\n// Tests API\nexport const getOfficerSubjectTest = async (officerId, subjectId) => {\n  const response = await api.get('/tests/officer-subject', {\n    params: {\n      officerID: officerId,\n      subjectID: subjectId\n    }\n  });\n  return response.data.data;\n};\nexport const startTest = async (officerId, testId) => {\n  const response = await api.post('/tests/start', null, {\n    params: {\n      officerID: officerId,\n      testID: testId\n    }\n  });\n  return response.data.data;\n};\nexport const submitTest = async (officerId, testId, answers) => {\n  const response = await api.post('/tests/submit', answers, {\n    params: {\n      officerID: officerId,\n      testID: testId\n    }\n  });\n  return response.data.data;\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","getOfficers","response","get","data","getOfficerById","id","getSubjects","getUnits","getOfficerSubjectTest","officerId","subjectId","params","officerID","subjectID","startTest","testId","post","testID","submitTest","answers"],"sources":["/Users/maianhnguyen/go/src/github.com/lehaisonagentai3/free-contest/frontend/src/api/api.ts"],"sourcesContent":["import axios, { AxiosResponse } from 'axios';\nimport { \n  Officer, \n  Subject, \n  Unit, \n  Test, \n  Submission, \n  TestAnswers,\n  ListOfficerResponse,\n  OfficerResponse,\n  ListSubjectResponse,\n  ListUnitResponse,\n  TestResponse,\n  SubmissionResponse\n} from '../types/api';\n\nconst API_BASE_URL = '/api/v1';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Officers API\nexport const getOfficers = async (): Promise<Officer[]> => {\n  const response: AxiosResponse<ListOfficerResponse> = await api.get('/officers');\n  return response.data.data;\n};\n\nexport const getOfficerById = async (id: string | number): Promise<Officer> => {\n  const response: AxiosResponse<OfficerResponse> = await api.get(`/officers/${id}`);\n  return response.data.data;\n};\n\n// Subjects API\nexport const getSubjects = async (): Promise<Subject[]> => {\n  const response: AxiosResponse<ListSubjectResponse> = await api.get('/subjects');\n  return response.data.data;\n};\n\n// Units API\nexport const getUnits = async (): Promise<Unit[]> => {\n  const response: AxiosResponse<ListUnitResponse> = await api.get('/units');\n  return response.data.data;\n};\n\n// Tests API\nexport const getOfficerSubjectTest = async (\n  officerId: string | number,\n  subjectId: string | number\n): Promise<Test> => {\n  const response: AxiosResponse<TestResponse> = await api.get('/tests/officer-subject', {\n    params: {\n      officerID: officerId,\n      subjectID: subjectId,\n    },\n  });\n  return response.data.data;\n};\n\nexport const startTest = async (\n  officerId: string | number,\n  testId: string | number\n): Promise<Test> => {\n  const response: AxiosResponse<TestResponse> = await api.post('/tests/start', null, {\n    params: {\n      officerID: officerId,\n      testID: testId,\n    },\n  });\n  return response.data.data;\n};\n\nexport const submitTest = async (\n  officerId: string | number,\n  testId: string | number,\n  answers: TestAnswers\n): Promise<Submission> => {\n  const response: AxiosResponse<SubmissionResponse> = await api.post('/tests/submit', answers, {\n    params: {\n      officerID: officerId,\n      testID: testId,\n    },\n  });\n  return response.data.data;\n};\n\nexport default api;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAyB,OAAO;AAgB5C,MAAMC,YAAY,GAAG,SAAS;AAE9B,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAgC;EACzD,MAAMC,QAA4C,GAAG,MAAML,GAAG,CAACM,GAAG,CAAC,WAAW,CAAC;EAC/E,OAAOD,QAAQ,CAACE,IAAI,CAACA,IAAI;AAC3B,CAAC;AAED,OAAO,MAAMC,cAAc,GAAG,MAAOC,EAAmB,IAAuB;EAC7E,MAAMJ,QAAwC,GAAG,MAAML,GAAG,CAACM,GAAG,CAAC,aAAaG,EAAE,EAAE,CAAC;EACjF,OAAOJ,QAAQ,CAACE,IAAI,CAACA,IAAI;AAC3B,CAAC;;AAED;AACA,OAAO,MAAMG,WAAW,GAAG,MAAAA,CAAA,KAAgC;EACzD,MAAML,QAA4C,GAAG,MAAML,GAAG,CAACM,GAAG,CAAC,WAAW,CAAC;EAC/E,OAAOD,QAAQ,CAACE,IAAI,CAACA,IAAI;AAC3B,CAAC;;AAED;AACA,OAAO,MAAMI,QAAQ,GAAG,MAAAA,CAAA,KAA6B;EACnD,MAAMN,QAAyC,GAAG,MAAML,GAAG,CAACM,GAAG,CAAC,QAAQ,CAAC;EACzE,OAAOD,QAAQ,CAACE,IAAI,CAACA,IAAI;AAC3B,CAAC;;AAED;AACA,OAAO,MAAMK,qBAAqB,GAAG,MAAAA,CACnCC,SAA0B,EAC1BC,SAA0B,KACR;EAClB,MAAMT,QAAqC,GAAG,MAAML,GAAG,CAACM,GAAG,CAAC,wBAAwB,EAAE;IACpFS,MAAM,EAAE;MACNC,SAAS,EAAEH,SAAS;MACpBI,SAAS,EAAEH;IACb;EACF,CAAC,CAAC;EACF,OAAOT,QAAQ,CAACE,IAAI,CAACA,IAAI;AAC3B,CAAC;AAED,OAAO,MAAMW,SAAS,GAAG,MAAAA,CACvBL,SAA0B,EAC1BM,MAAuB,KACL;EAClB,MAAMd,QAAqC,GAAG,MAAML,GAAG,CAACoB,IAAI,CAAC,cAAc,EAAE,IAAI,EAAE;IACjFL,MAAM,EAAE;MACNC,SAAS,EAAEH,SAAS;MACpBQ,MAAM,EAAEF;IACV;EACF,CAAC,CAAC;EACF,OAAOd,QAAQ,CAACE,IAAI,CAACA,IAAI;AAC3B,CAAC;AAED,OAAO,MAAMe,UAAU,GAAG,MAAAA,CACxBT,SAA0B,EAC1BM,MAAuB,EACvBI,OAAoB,KACI;EACxB,MAAMlB,QAA2C,GAAG,MAAML,GAAG,CAACoB,IAAI,CAAC,eAAe,EAAEG,OAAO,EAAE;IAC3FR,MAAM,EAAE;MACNC,SAAS,EAAEH,SAAS;MACpBQ,MAAM,EAAEF;IACV;EACF,CAAC,CAAC;EACF,OAAOd,QAAQ,CAACE,IAAI,CAACA,IAAI;AAC3B,CAAC;AAED,eAAeP,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}